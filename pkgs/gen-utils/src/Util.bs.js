// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_math from "rescript/lib/es6/js_math.js"
import * as Js_option from "rescript/lib/es6/js_option.js"

function str_to_int(s) {
	var nt = parseInt(s, 10)
	var match = isNaN(nt)
	if (match) {
		return
	} else {
		return nt
	}
}

function nullable_to_option(n) {
	if (null !== n) {
		return Js_option.some(n)
	}
}

function sum_uint8_entries(t) {
	var len = t.length
	var _acc = 0.0
	var _i = 0
	while (true) {
		var i = _i
		var acc = _acc
		if (i === len) {
			return acc
		}
		var curr = t[i]
		var acc$1 = acc + curr * Math.pow(256, i)
		_i = (i + 1) | 0
		_acc = acc$1
		continue
	}
}

function mod_float(a, b) {
	return a % b
}

function random_int(min, max) {
	var range = (((max - min) | 0) + 1) | 0
	var bytes_needed = Js_math.ceil_int(Math.log2(range) / 8)
	var cutoff = Math.floor(Math.pow(256, bytes_needed) / range) * range
	var bytes = new Uint8Array(bytes_needed)
	var loop = function (_param) {
		while (true) {
			crypto.getRandomValues(bytes)
			var value = sum_uint8_entries(bytes)
			if (value < cutoff) {
				return value
			}
			_param = undefined
			continue
		}
	}
	var value = loop(undefined)
	return min + mod_float(value, range)
}

export { str_to_int, nullable_to_option, random_int }
/* No side effect */
